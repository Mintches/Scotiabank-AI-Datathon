# -*- coding: utf-8 -*-
"""Scotiabank Data Science.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DXyCeJVMA10aQSAioNsCmZiaT9mJsJlh
"""

from transformers import pipeline
# import pandas lib as pd
import pandas as pd

# read by default 1st sheet of an excel file
data = pd.read_excel('/Winter 2024 Scotia DSD Data Set.xlsx')
data.set_index('Review_ID', inplace = True)
data.head()

classifier = pipeline("zero-shot-classification", device=0, model="valhalla/distilbart-mnli-12-9")

topics = ["specific", "2SV", "Application Performance", "Accessibility", "Appointment_Booking", "Biometric_Login", "Budgeting", "Chat", "Cheque_Deposit", "Credit_Score", "Email_Money_Transfer", "Errors", "Fee", "Info_Alerts", "International_Money_Movement", "Investments", "Login_and_Logout_Issues", "Quick_Balance", "Request_New_Card", "Rewards", "Save_and_Share_Statements"]
topicparsed = ["specific", "2 factor authentication", "lag", "impairment accessibility", "book APPOINTMENT", "finger biometric", "budget", "chat or talk or call", "cheque", "score", "email money transfer", "error", "paying fees", "alerts", "international money transfer", "investment fund", "log or login", "Quick balance", "new card", "rewards", "about statements"]
                           #["2SV", "Application Performance", "Accessibility", "Appointment_Booking", "Biometric_Login", "Budgeting", "Chat", "Cheque_Deposit", "Credit_Score", "Email_Money_Transfer", "Errors", "Fee", "Info_Alerts", "International_Money_Movement", "Investments", "Login_and_Logout_Issues", "Quick_Balance", "Request_New_Card", "Rewards", "Save_and_Share_Statements"]
topicsthreshold = [0, 0.8, 0.95, 0.9, 0.8, 0.85, 0.9, 0.7, 0.9, 0.7, 0.9, 0.6, 0.9, 0.95, 0.8, 0.6, 0.7, 0.95, 0.6, 0.4, 0.85]
topicidx = {}

for i in range(len(topics)):
  topicidx[topicparsed[i]] = i

pruned = {}

startidx = 0
endidx = 1000

lcontstrings = []
for i in range(startidx, endidx):
  cur = data.loc[i, "Review"]
  numwords = 1
  for j in range(1, len(cur)):
    if cur[j] != " " and cur[j - 1] == " ":
      numwords += 1
  if (numwords >= 2):
    lcontstrings.append(cur)
    pruned[i] = False
  else:
    pruned[i] = True

#for i in range(len(data)):
    #lcontstrings.append(data.loc[i, "Review"])

generateddata = []

for i in range(len(topics)):
  generateddata.append([])
  curl = [topicparsed[i]]
  #print(curl)
  res = classifier(
      lcontstrings,
      candidate_labels=curl)
  #print(res)
  for j in range(len(res)):
    generateddata[i].append(res[j]['scores'][0])
    #print(res[j]['scores'][0])
  #print(generateddata[i])

d = {}
for i in range(len(topics)):
    d[topics[i]] = 0

topiccorrespondence = []

curidx = 0

for i in range(endidx - startidx):
  topiccorrespondence.append([])
  if pruned[startidx + i]:
    continue
  for j in range(len(topics)):
    #print(res[curidx]['scores'][j])
    #curtopic = res[curidx]['labels'][j]
    #tidx = topicidx[curtopic]
    if generateddata[j][curidx] >= topicsthreshold[j]:
      d[topics[j]] += 1
      topiccorrespondence[i].append(topics[j])
    #if j == 1:
      #print(i, generateddata[j][curidx])#, res[curidx]['labels'][j], res[curidx]['sequence'])
  #print(i, res[curidx]['scores'][1], res[curidx]['labels'][1], res[curidx]['sequence'])
  curidx += 1

import functools

def compdate(x, y, idx):
  if idx == 10:
    return 0
  elif x[idx] < y[idx]:
    return 1
  elif x[idx] > y[idx]:
    return -1
  return compdate(x, y, idx + 1)

def sfunction(x, y):
  return compdate(x[1], y[1], 0)

l = []

for i in range(len(data)):
  l.append([i, str(data.loc[i, "Date"])])

s = sorted(l, key=functools.cmp_to_key(sfunction))

topicweight = {}

for i in range(len(topics)):
    topicweight[topics[i]] = 0

for i in range(len(s)):
  idx = s[i][0]
  if idx < startidx or idx >= endidx:
    continue
  for j in range(len(topiccorrespondence[idx - startidx])):
    topicweight[topiccorrespondence[idx - startidx][j]] += (6 - data.loc[idx, "Rating"]) * (len(data) - i)


for i in range(len(topics)):
  print(topics[i], ":", topicweight[topics[i]])
print(topicweight)

print()

for i in range(len(topics)):
  print(topics[i], ":", d[topics[i]])